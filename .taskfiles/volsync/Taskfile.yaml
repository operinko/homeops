---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

# Taskfile used to manage certain VolSync tasks for a given application, limitations are as followed.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Each application only has one PVC that is being replicated

vars:
  VOLSYNC_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/volsync/resources'

tasks:

  state-*:
    desc: Suspend or resume Volsync
    cmds:
      - flux --namespace storage {{.STATE}} kustomization volsync
      - flux --namespace storage {{.STATE}} helmrelease volsync
      - kubectl --namespace storage scale deployment volsync --replicas {{if eq .STATE "suspend"}}0{{else}}1{{end}}
    vars:
      STATE: '{{index .MATCH 0}}'
    preconditions:
      - '[[ "{{.STATE}}" == "suspend" || "{{.STATE}}" == "resume" ]]'
      - which flux kubectl

  unlock:
    desc: Unlock all restic source repos
    cmds:
      - for: { var: SOURCES, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} patch --field-manager=flux-client-side-apply replicationsources {{splitList "," .ITEM | last}} --type merge --patch "{\"spec\":{\"restic\":{\"unlock\":\"{{now | unixEpoch}}\"}}}"
    vars:
      SOURCES:
        sh: kubectl get replicationsources --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - which kubectl

  snapshot:
    desc: Snapshot an app [NS=default] [APP=required]
    cmds:
      - kubectl --namespace {{.NS}} patch replicationsources {{.APP}} --type merge -p '{"spec":{"trigger":{"manual":"{{now | unixEpoch}}"}}}'
      - until kubectl --namespace {{.NS}} get job/{{.JOB}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for=condition=complete --timeout=120m
    vars:
      NS: '{{.NS | default "default"}}'
      JOB: volsync-src-{{.APP}}
    requires:
      vars: [APP]
    preconditions:
      - kubectl --namespace {{.NS}} get replicationsources {{.APP}}
      - which kubectl

  restore:
    desc: Restore an app [NS=default] [APP=required] [PREVIOUS=required]
    cmds:
      # Suspend
      - flux --namespace {{.NS}} suspend kustomization {{.APP}}
      - flux --namespace {{.NS}} suspend helmrelease {{.APP}}
      - kubectl --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas 0
      - kubectl --namespace {{.NS}} wait pod --for=delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
      # Restore
      - minijinja-cli {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.NS}} get job/volsync-dst-{{.APP}}-manual &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/volsync-dst-{{.APP}}-manual --for=condition=complete --timeout=120m
      - kubectl --namespace {{.NS}} delete replicationdestination {{.APP}}-manual
      # Resume
      - flux --namespace {{.NS}} resume kustomization {{.APP}}
      - flux --namespace {{.NS}} resume helmrelease {{.APP}}
      - flux --namespace {{.NS}} reconcile helmrelease {{.APP}} --force
      - kubectl --namespace {{.NS}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
    vars:
      NS: '{{.NS | default "default"}}'
      CONTROLLER:
        sh: kubectl --namespace {{.NS}} get deployment {{.APP}} &>/dev/null && echo deployment || echo statefulset
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
      PREVIOUS: '{{.PREVIOUS}}'
      CLAIM:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.sourcePVC}'
      ACCESS_MODES:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.accessModes}'
      STORAGE_CLASS_NAME:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.storageClassName}'
      PUID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsUser}'
      PGID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsGroup}'
    requires:
      vars: [APP, PREVIOUS]
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2
      - which flux kubectl minijinja-cli

  unlock-local:
    desc: Unlock a restic source repo from local machine [NS=default] [APP=required]
    cmds:
      - minijinja-cli {{.VOLSYNC_RESOURCES_DIR}}/unlock.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.NS}} get job/volsync-unlock-{{.APP}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/volsync-unlock-{{.APP}} --for condition=complete --timeout=5m
      - stern --namespace {{.NS}} job/volsync-unlock-{{.APP}} --no-follow
      - kubectl --namespace {{.NS}} delete job volsync-unlock-{{.APP}}
    vars:
      NS: '{{.NS | default "default"}}'
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
    requires:
      vars: [APP]
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/unlock.yaml.j2
      - which kubectl minijinja-cli stern

  unstuck:
    desc: Fix a stuck VolSync snapshot [NS=default] [APP=required]
    summary: |
      This task attempts to fix a stuck VolSync snapshot by:
      1. Deleting the ReplicationSource
      2. Force deleting the stuck VolumeSnapshot
      3. Force deleting the VolumeSnapshotContent if it exists
      4. Reconciling the application's Kustomization to recreate the ReplicationSource
      5. Manually triggering a new snapshot
    cmds:
      - echo "Step 1: Deleting ReplicationSource {{.APP}} in namespace {{.NS}}"
      - kubectl delete replicationsource {{.APP}} -n {{.NS}} || true
      - echo "Step 2: Force deleting VolumeSnapshot volsync-{{.APP}}-src in namespace {{.NS}}"
      - kubectl delete volumesnapshot volsync-{{.APP}}-src -n {{.NS}} --force --grace-period=0 || true
      - echo "Step 3: Checking for VolumeSnapshotContent"
      - |
        SNAPSHOT_CONTENT=$(kubectl get volumesnapshot volsync-{{.APP}}-src -n {{.NS}} -o jsonpath='{.status.boundVolumeSnapshotContentName}' 2>/dev/null || echo "")
        if [ -n "$SNAPSHOT_CONTENT" ]; then
          echo "Force deleting VolumeSnapshotContent $SNAPSHOT_CONTENT"
          kubectl delete volumesnapshotcontent $SNAPSHOT_CONTENT --force --grace-period=0 || true
        else
          echo "No VolumeSnapshotContent found or already deleted"
        fi
      - echo "Step 4: Reconciling Kustomization {{.APP}} in namespace {{.NS}}"
      - flux reconcile kustomization {{.APP}} -n {{.NS}} || true
      - echo "Step 5: Waiting for ReplicationSource to be recreated (30 seconds)"
      - sleep 30
      - echo "Step 6: Manually triggering a new snapshot"
      - |
        TIMESTAMP=$(date +%s)
        kubectl -n {{.NS}} patch replicationsources {{.APP}} --type merge -p "{\"spec\":{\"trigger\":{\"manual\":\"$TIMESTAMP\"}}}" || true
      - echo "Done! Check the status with: kubectl get replicationsource {{.APP}} -n {{.NS}}"
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [APP]
    preconditions:
      - which kubectl flux
