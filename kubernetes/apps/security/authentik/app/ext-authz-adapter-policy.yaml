---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-ext-authz-policy
  namespace: security
  labels:
    app.kubernetes.io/name: authentik-ext-authz
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/component: ext-authz
data:
  policy.rego: |
    package envoy.authz

    default allow = false

    # Map unauthorized to a redirect to authentik signin
    # Note: Replace the redirect URL if you need a different start URL per app
    unauth_redirect := {
      "allowed": false,
      "headers": {
        "location": {
          "append": [
            "https://auth.vaderrp.com/outpost.goauthentik.io/start?rd=%2F"
          ]
        }
      },
      "http_status": 302,
    }

    # Accept if Authentik forward-auth endpoint returns 200
    allow = true {
      result := http.send({
        "method": "GET",
        "url": sprintf("http://authentik-server.security.svc.cluster.local/outpost.goauthentik.io/auth/nginx" , []),
        "headers": {
          ":authority": input.attributes.request.http.headers[":authority"],
          "x-forwarded-proto": input.attributes.request.http.headers["x-forwarded-proto"],
          "x-forwarded-host": input.attributes.request.http.headers["x-forwarded-host"],
          "cookie": input.attributes.request.http.headers["cookie"],
          "authorization": input.attributes.request.http.headers["authorization"],
        },
      })
      result.status_code == 200
    }

    # Otherwise, deny with redirect to login
    allow_response := unauth_redirect { not allow }

