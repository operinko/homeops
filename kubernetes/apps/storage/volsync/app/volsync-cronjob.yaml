---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volsync-rd-refresh
  namespace: storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: volsync-rd-refresh
rules:
  - apiGroups: ["volsync.backube"]
    resources: ["replicationdestinations"]
    verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: volsync-rd-refresh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: volsync-rd-refresh
subjects:
  - kind: ServiceAccount
    name: volsync-rd-refresh
    namespace: storage
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: volsync-rd-refresh
  namespace: storage
spec:
  schedule: "30 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          serviceAccountName: volsync-rd-refresh
          restartPolicy: OnFailure
          containers:
            - name: kubectl
              image: ghcr.io/onedr0p/kubectl:v1.30.6
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  kubectl get replicationdestinations --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}' | while read ns name; do
                    case "$name" in *-manual) echo "skip $ns/$name"; continue;; esac
                    echo "patch $ns/$name"
                    kubectl -n "$ns" patch replicationdestination "$name" --type merge -p '{"spec":{"trigger":{"manual":"'"$(date +%s)"'"}}}'
                  done
